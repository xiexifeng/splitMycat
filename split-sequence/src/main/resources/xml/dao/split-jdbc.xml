<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <bean name="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
		<property name="filters" value="stat" />  
        <property name="maxActive"><value>${db.maxActive}</value></property>  
        <property name="initialSize"><value>${db.initialSize}</value></property>  
        <property name="maxWait"><value>${db.maxWait}</value></property>  
        <property name="minIdle"><value>${db.minIdle}</value></property>  
        <property name="timeBetweenEvictionRunsMillis"><value>${db.timeBetweenEvictionRunsMillis}</value></property>  
        <property name="minEvictableIdleTimeMillis"><value>${db.minEvictableIdleTimeMillis}</value></property> 
        <property name="maxOpenPreparedStatements"><value>${db.maxOpenPreparedStatements}</value></property> 
        <property name="removeAbandoned"><value>${db.removeAbandoned}</value></property>  <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandonedTimeout"><value>${db.removeAbandonedTimeout}</value></property>
        <property name="logAbandoned"><value>${db.logAbandoned}</value></property> <!-- 关闭abanded连接时输出错误日志 -->
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />
	</bean>
    	
	<bean id="dataSource_db_1" parent="parentDataSource" destroy-method="close">
        <property name="driverClassName"><value>${db.db_1.driverClassName}</value></property>
        <property name="url"><value>${db.db_1.url}</value></property>
        <property name="username"><value>${db.db_1.username}</value></property>
        <property name="password"><value>${db.db_1.password}</value></property>
	</bean>
	
	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource_db_1"></property>
	</bean>
	
    <!-- 事务支持 -->
    <bean id="tm_db_1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource"><ref bean="dataSource_db_1"/></property>
    </bean>
    
	<!--
        Transaction advice definition, based on method name patterns.
        Defaults to PROPAGATION_REQUIRED for all methods whose name starts with
        "insert" or "update", and to PROPAGATION_REQUIRED with read-only hint
        for all other methods.
        
		属性				是否需要？	默认值		描述
		name			是						与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。如：'get*'、'handle*'、'on*Event'等等。
		propagation		不			REQUIRED	事务传播行为
		isolation		不			DEFAULT		事务隔离级别
		timeout			不			-1			事务超时的时间（以秒为单位）
		read-only		不			false		事务是否只读？
		rollback-for	不						将被触发进行回滚的 Exception(s)；以逗号分开。如：'com.foo.MyBusinessException,ServletException'
		no-rollback-for	不						不 被触发进行回滚的 Exception(s)；以逗号分开。如：'com.foo.MyBusinessException
    -->
    <tx:advice id="txAdvice_db_1" transaction-manager="tm_db_1">
        <tx:attributes>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="copy*"   propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*"   propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="init*"   propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="destroy*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="move*"   propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

	<aop:config>
		<aop:advisor pointcut="execution(* com.xifeng.service..*.*(..))" advice-ref="txAdvice_db_1"/>
	</aop:config>
	
	<!-- mybatis mapping alias configuration auto -->
	<bean id="sqlSessionFactory" class="com.xifeng.spring.SqlSessionFactoryBeanUtil">
	 	<property name="configLocation" value="classpath:dao/configuration.xml"></property>
		<property name="dataSource" ref="dataSource_db_1" />
		<property name="mapperLocations" value="classpath*:dao/mapping/*/*.xml"/>
		<property name="typeAliasesPackage" value="com.xifeng.model" />
	</bean>
</beans>
